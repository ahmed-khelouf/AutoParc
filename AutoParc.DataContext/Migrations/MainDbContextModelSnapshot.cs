// <auto-generated />
using System;
using AutoParc.DataContext;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace AutoParc.DataContext.Migrations
{
    [DbContext(typeof(MainDbContext))]
    partial class MainDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.36")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("AutoParc.Model.EmployeModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("EntrepriseId")
                        .HasColumnType("int");

                    b.Property<string>("Nom")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Prenom")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("VehiculeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EntrepriseId");

                    b.HasIndex("VehiculeId")
                        .IsUnique()
                        .HasFilter("[VehiculeId] IS NOT NULL");

                    b.ToTable("Employe");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            EntrepriseId = 1,
                            Nom = "Dupont",
                            Prenom = "Jean",
                            VehiculeId = 1
                        },
                        new
                        {
                            Id = 2,
                            EntrepriseId = 2,
                            Nom = "Martin",
                            Prenom = "Paul",
                            VehiculeId = 2
                        },
                        new
                        {
                            Id = 3,
                            EntrepriseId = 3,
                            Nom = "Durand",
                            Prenom = "Marie",
                            VehiculeId = 3
                        },
                        new
                        {
                            Id = 4,
                            EntrepriseId = 3,
                            Nom = "Petit",
                            Prenom = "Luc",
                            VehiculeId = 4
                        },
                        new
                        {
                            Id = 5,
                            EntrepriseId = 3,
                            Nom = "Leroy",
                            Prenom = "Sophie",
                            VehiculeId = 5
                        });
                });

            modelBuilder.Entity("AutoParc.Model.EntrepriseModel", b =>
                {
                    b.Property<int?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int?>("Id"), 1L, 1);

                    b.Property<bool>("ContratActif")
                        .HasColumnType("bit");

                    b.Property<string>("Nom")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Entreprise");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ContratActif = true,
                            Nom = "Entreprise Alpha"
                        },
                        new
                        {
                            Id = 2,
                            ContratActif = false,
                            Nom = "Entreprise Beta"
                        },
                        new
                        {
                            Id = 3,
                            ContratActif = true,
                            Nom = "Entreprise Gamma"
                        });
                });

            modelBuilder.Entity("AutoParc.Model.Identity.UserModel", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<int?>("EntrepriseId")
                        .HasColumnType("int");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("EntrepriseId");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "admin-user",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "f1d638fb-6d73-4567-a3df-71510d951c8d",
                            Email = "admin@autoparc.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@AUTOPARC.COM",
                            NormalizedUserName = "ADMIN@AUTOPARC.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEHMIpmSHoSGFbjb0MlXVY1dlZJTtHAtOv+Im/z4znAcnTH+pU0FXAXVJE50bAcadxw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "e3cdd1a9-d336-43a5-b93c-b32c912f8483",
                            TwoFactorEnabled = false,
                            UserName = "admin@autoparc.com"
                        },
                        new
                        {
                            Id = "client-user",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "ca2e7a8e-9b69-4e37-b8b0-cac2136311e7",
                            Email = "client@autoparc.com",
                            EmailConfirmed = true,
                            EntrepriseId = 1,
                            LockoutEnabled = false,
                            NormalizedEmail = "CLIENT@AUTOPARC.COM",
                            NormalizedUserName = "CLIENT@AUTOPARC.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEPGA9OlznpSb4mgXEg5ylwHL9WWvZTBvwXH88C5kinXcMRk1jDhOKnXpPUwvyedmSg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "0fedf64e-9573-44bf-9b9d-279aa22fc701",
                            TwoFactorEnabled = false,
                            UserName = "client@autoparc.com"
                        });
                });

            modelBuilder.Entity("AutoParc.Model.VehiculeModel", b =>
                {
                    b.Property<int?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int?>("Id"), 1L, 1);

                    b.Property<bool>("Disponibilite")
                        .HasColumnType("bit");

                    b.Property<int?>("EmployeId")
                        .HasColumnType("int");

                    b.Property<int>("EntrepriseId")
                        .HasColumnType("int");

                    b.Property<string>("Marque")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Modele")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RaisonIndisponibilite")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("EntrepriseId");

                    b.ToTable("Vehicule");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Disponibilite = true,
                            EmployeId = 1,
                            EntrepriseId = 1,
                            Marque = "Renault",
                            Modele = "Clio"
                        },
                        new
                        {
                            Id = 2,
                            Disponibilite = false,
                            EmployeId = 2,
                            EntrepriseId = 2,
                            Marque = "Peugeot",
                            Modele = "208",
                            RaisonIndisponibilite = "En réparation"
                        },
                        new
                        {
                            Id = 3,
                            Disponibilite = true,
                            EmployeId = 3,
                            EntrepriseId = 3,
                            Marque = "Citroën",
                            Modele = "C3"
                        },
                        new
                        {
                            Id = 4,
                            Disponibilite = true,
                            EmployeId = 4,
                            EntrepriseId = 3,
                            Marque = "Toyota",
                            Modele = "Yaris"
                        },
                        new
                        {
                            Id = 5,
                            Disponibilite = true,
                            EmployeId = 5,
                            EntrepriseId = 3,
                            Marque = "Ford",
                            Modele = "Focus"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "role-admin",
                            ConcurrencyStamp = "395d9063-d93b-460c-9d26-b627be631806",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "role-client",
                            ConcurrencyStamp = "a2eebaa1-b0c5-42de-af8d-efdb8231a063",
                            Name = "Client",
                            NormalizedName = "CLIENT"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "admin-user",
                            RoleId = "role-admin"
                        },
                        new
                        {
                            UserId = "client-user",
                            RoleId = "role-client"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("AutoParc.Model.EmployeModel", b =>
                {
                    b.HasOne("AutoParc.Model.EntrepriseModel", "Entreprise")
                        .WithMany("Employes")
                        .HasForeignKey("EntrepriseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AutoParc.Model.VehiculeModel", "Vehicule")
                        .WithOne("Employe")
                        .HasForeignKey("AutoParc.Model.EmployeModel", "VehiculeId");

                    b.Navigation("Entreprise");

                    b.Navigation("Vehicule");
                });

            modelBuilder.Entity("AutoParc.Model.Identity.UserModel", b =>
                {
                    b.HasOne("AutoParc.Model.EntrepriseModel", "Entreprise")
                        .WithMany()
                        .HasForeignKey("EntrepriseId");

                    b.Navigation("Entreprise");
                });

            modelBuilder.Entity("AutoParc.Model.VehiculeModel", b =>
                {
                    b.HasOne("AutoParc.Model.EntrepriseModel", "Entreprise")
                        .WithMany("Vehicules")
                        .HasForeignKey("EntrepriseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Entreprise");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("AutoParc.Model.Identity.UserModel", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("AutoParc.Model.Identity.UserModel", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AutoParc.Model.Identity.UserModel", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("AutoParc.Model.Identity.UserModel", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AutoParc.Model.EntrepriseModel", b =>
                {
                    b.Navigation("Employes");

                    b.Navigation("Vehicules");
                });

            modelBuilder.Entity("AutoParc.Model.VehiculeModel", b =>
                {
                    b.Navigation("Employe");
                });
#pragma warning restore 612, 618
        }
    }
}
